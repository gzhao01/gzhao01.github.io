<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo-build</title>
    <url>/2020/05/25/hexo-build/</url>
    <content><![CDATA[<p>记录hexo的搭建过程以及插件的安装过程</p>
<a id="more"></a>

<p>总体的搭建过程看</p>
<p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa</a></p>
<p>以下是各种插件</p>
<h1 id="1-hexo命令"><a href="#1-hexo命令" class="headerlink" title="1. hexo命令"></a>1. hexo命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>

<h1 id="2-插入图片（和typora结合）"><a href="#2-插入图片（和typora结合）" class="headerlink" title="2. 插入图片（和typora结合）"></a>2. 插入图片（和typora结合）</h1><p><a href="https://www.cnblogs.com/cocowool/p/hexo-image-link.html" target="_blank" rel="noopener">https://www.cnblogs.com/cocowool/p/hexo-image-link.html</a></p>
<p>因为hexo的资源根目录在source处，typora默认的相对路径不能帮助hexo索引到图片，需要插件搞定</p>
<ol>
<li><p>hexo配置</p>
<p>在_config.yml中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用hexo插件</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-image-link --save</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>设置typora</p>
<img src="/2020/05/25/hexo-build/39469-20200316225054107-484234981.png" class="" title="img">

</li>
</ol>
<h1 id="3-live2d插件"><a href="#3-live2d插件" class="headerlink" title="3. live2d插件"></a>3. live2d插件</h1><p><a href="https://www.jianshu.com/p/4b61d8702cfa" target="_blank" rel="noopener">https://www.jianshu.com/p/4b61d8702cfa</a></p>
<ol>
<li><p>npm安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
</li>
<li><p>config配置（hexo不是主题文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  debug: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载模型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件夹</p>
<p>下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的<code>model.use</code>项，将其修改为live2d_models文件夹中的模型文件夹名称。</p>
</li>
</ol>
<h1 id="4-next主题（评论系统）"><a href="#4-next主题（评论系统）" class="headerlink" title="4. next主题（评论系统）"></a>4. next主题（评论系统）</h1><p><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997" target="_blank" rel="noopener">https://blog.csdn.net/jiunian_2761/article/details/97388997</a></p>
<h1 id="5-next主题（访问人数）"><a href="#5-next主题（访问人数）" class="headerlink" title="5. next主题（访问人数）"></a>5. next主题（访问人数）</h1><p><a href="https://blog.csdn.net/qq_43751489/article/details/102990376" target="_blank" rel="noopener">https://blog.csdn.net/qq_43751489/article/details/102990376</a></p>
<h1 id="6-next主题（字数统计，阅读时长）"><a href="#6-next主题（字数统计，阅读时长）" class="headerlink" title="6. next主题（字数统计，阅读时长）"></a>6. next主题（字数统计，阅读时长）</h1><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93670772" target="_blank" rel="noopener">https://blog.csdn.net/mqdxiaoxiao/article/details/93670772</a></p>
<h1 id="7-next主题（canvas-next）"><a href="#7-next主题（canvas-next）" class="headerlink" title="7.next主题（canvas_next）"></a>7.next主题（canvas_next）</h1><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/95000707" target="_blank" rel="noopener">https://blog.csdn.net/mqdxiaoxiao/article/details/95000707</a></p>
<ol>
<li><p>进入next文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载canvas_next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件配置</p>
<p>在next的config文件中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &#39;0,0,0&#39; # RGB values, use &#39;,&#39; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>biliBara</title>
    <url>/2020/05/24/biliBara/</url>
    <content><![CDATA[<p>flask+vue的b站弹幕爬虫统计数据</p>
<img src="/2020/05/24/biliBara/1590339415849.png" class="" width="1590339415849">

<a id="more"></a>

<h1 id="1-FLASK"><a href="#1-FLASK" class="headerlink" title="1.FLASK"></a>1.FLASK</h1><h3 id="1-requirement文件"><a href="#1-requirement文件" class="headerlink" title="1. requirement文件"></a>1. requirement文件</h3><p>生成</p>
<figure class="highlight plain"><figcaption><span>freeze > requirements.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<h1 id="2-PYTHON"><a href="#2-PYTHON" class="headerlink" title="2.PYTHON"></a>2.PYTHON</h1><h3 id="1-jieba提词和echarts-wordcloud"><a href="#1-jieba提词和echarts-wordcloud" class="headerlink" title="1.jieba提词和echarts wordcloud"></a>1.jieba提词和echarts wordcloud</h3><p><a href="https://www.jianshu.com/p/8490b46473a5" target="_blank" rel="noopener">https://www.jianshu.com/p/8490b46473a5</a><br>一般词云都是要使用词语的权重，这个权重的计算可以使用jieba提词轻松实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="comment">#获得一个元祖的数组[("中国", 0.234),("人", 0.4613)]</span></span><br><span class="line">tags = jieba.analyse.extract_tags(content, topK=<span class="number">100</span>, withWeight=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> tex, weight <span class="keyword">in</span> tags:</span><br><span class="line">   tagsList[tex] += int(weight*<span class="number">10000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-flask接受请求的参数"><a href="#2-flask接受请求的参数" class="headerlink" title="2.flask接受请求的参数"></a>2.flask接受请求的参数</h3><p><a href="https://www.cnblogs.com/shangpolu/p/7106922.html" target="_blank" rel="noopener">https://www.cnblogs.com/shangpolu/p/7106922.html</a><br>1.get请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.post请求</span><br><span class="line">&#96;&#96;&#96;request.form.get(&quot;key&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="3-python原始爬虫"><a href="#3-python原始爬虫" class="headerlink" title="3.python原始爬虫"></a>3.python原始爬虫</h3><p><a href="https://blog.csdn.net/weixin_41429999/article/details/105781775" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41429999/article/details/105781775</a></p>
<h1 id="3-VUE"><a href="#3-VUE" class="headerlink" title="3.VUE"></a>3.VUE</h1><h3 id="1-vuex，localStorage和sessionStorage"><a href="#1-vuex，localStorage和sessionStorage" class="headerlink" title="1.vuex，localStorage和sessionStorage"></a>1.vuex，localStorage和sessionStorage</h3><p><a href="https://www.cnblogs.com/liangtao999/p/12623617.html" target="_blank" rel="noopener">https://www.cnblogs.com/liangtao999/p/12623617.html</a></p>
<p>veux主要用于页面跳转间的传值，储存在内存之中，页面刷新就会丢失</p>
<p>localStorage会永久储存在浏览器中，不丢失</p>
<p>sessionStorage临时储存在浏览器中，浏览器关闭便会丢失</p>
<h3 id="2-页面无跳闪刷新"><a href="#2-页面无跳闪刷新" class="headerlink" title="2.页面无跳闪刷新"></a>2.页面无跳闪刷新</h3><p><a href="https://blog.csdn.net/weixin_43885417/article/details/91310674" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43885417/article/details/91310674</a></p>
<h3 id="3-echarts"><a href="#3-echarts" class="headerlink" title="3.echarts"></a>3.echarts</h3><p>可以直接卸载mounted之中<br><strong>impotant！</strong>但要注意的是，在使用axiso获取数据时，要将设置项（setOption）放在axios的请求处理之中，否则图表将不会显示数据</p>
<h3 id="4-vue-config-js配置"><a href="#4-vue-config-js配置" class="headerlink" title="4.vue.config.js配置"></a>4.vue.config.js配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line">const debug &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line"> </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 访问资源的基本路径，一般不需要进行修改，此处还有疑问，正在验证中</span><br><span class="line">    &#x2F;&#x2F; baseUrl: &#39;&#x2F;&#39;,&lt;br&gt;        publicPath: &#39;&#x2F;&#39;,  &#x2F;&#x2F;publicPath取代了baseUrl</span><br><span class="line">    &#x2F;&#x2F; 打包之后输出文件目录</span><br><span class="line">    outputDir: &#39;dist&#39;,</span><br><span class="line">    assetsDir: &#39;assets&#39;, &#x2F;&#x2F; 打包之后静态资源目录 (js, css, img, fonts)</span><br><span class="line">    &#x2F;&#x2F; eslint-loader 是否在保存的时候检查</span><br><span class="line">    lintOnSave: true,</span><br><span class="line">    &#x2F;&#x2F; use the full build with in-browser compiler?</span><br><span class="line">    &#x2F;&#x2F; https:&#x2F;&#x2F;vuejs.org&#x2F;v2&#x2F;guide&#x2F;installation.html#Runtime-Compiler-vs-Runtime-only</span><br><span class="line">    &#x2F;&#x2F; runtimeCompiler: true, &#x2F;&#x2F;关键点在这  原来的 Compiler 换成了 runtimeCompiler</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; webpack配置</span><br><span class="line">    &#x2F;&#x2F; see https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;vue-cli&#x2F;blob&#x2F;dev&#x2F;docs&#x2F;webpack.md   webpack链接API，用于生成和修改webapck配置</span><br><span class="line">    chainWebpack: () &#x3D;&gt; &#123;</span><br><span class="line">        if(debug) &#123;</span><br><span class="line">            &#x2F;&#x2F; 本地开发配置</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 生产开发配置</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    configureWebpack: (config) &#x3D;&gt; &#123; &#x2F;&#x2F; webpack配置，值位对象时会合并配置，为方法时会改写配置</span><br><span class="line">        if(debug) &#123; &#x2F;&#x2F; 开发环境配置</span><br><span class="line">            config.devtool &#x3D; &#39;cheap-module-eval-source-map&#39;</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; 生产环境配置</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        Object.assign(config, &#123; &#x2F;&#x2F; 开发生产共同配置</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                alias: &#123;</span><br><span class="line">                    &#39;@&#39;: path.resolve(__dirname, &#39;.&#x2F;src&#39;) &#x2F;&#x2F;设置路径别名</span><br><span class="line">                    &#x2F;&#x2F;...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; vue-loader 配置项</span><br><span class="line">    &#x2F;&#x2F; https:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;en&#x2F;options.html</span><br><span class="line">    &#x2F;&#x2F; vueLoader: &#123;&#125;,</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 生产环境是否生成 sourceMap 文件</span><br><span class="line">    productionSourceMap: true,</span><br><span class="line">    &#x2F;&#x2F; css相关配置 配置高于chainWebpack中关于css loader的配置</span><br><span class="line">    css: &#123;</span><br><span class="line">        &#x2F;&#x2F; 是否使用css分离插件 ExtractTextPlugin</span><br><span class="line">        extract: true,</span><br><span class="line">        &#x2F;&#x2F; 开启 CSS source maps?是否在构建样式地图，false将提高构建速度</span><br><span class="line">        sourceMap: false,</span><br><span class="line">        &#x2F;&#x2F; css预设器配置项</span><br><span class="line">        loaderOptions: &#123;&#125;,</span><br><span class="line">        &#x2F;&#x2F; 启用 CSS modules for all css &#x2F; pre-processor files.</span><br><span class="line">        modules: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; use thread-loader for babel &amp; TS in production build</span><br><span class="line">    &#x2F;&#x2F; enabled by default if the machine has more than 1 cores 构建时开启多进程处理babel编译</span><br><span class="line">    parallel: require(&#39;os&#39;).cpus().length &gt; 1,</span><br><span class="line">    &#x2F;&#x2F; 是否启用dll</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;vue-cli&#x2F;blob&#x2F;dev&#x2F;docs&#x2F;cli-service.md#dll-mode</span><br><span class="line">    &#x2F;&#x2F; dll: false,</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; PWA 插件相关配置</span><br><span class="line">    &#x2F;&#x2F; see https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;vue-cli&#x2F;tree&#x2F;dev&#x2F;packages&#x2F;%40vue&#x2F;cli-plugin-pwa</span><br><span class="line">    pwa: &#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F; webpack-dev-server 相关配置</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: true,</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        port: 8084,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">          &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">            target: &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#39;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            secure: false,</span><br><span class="line">            pathRewrite:&#123;</span><br><span class="line">              &quot;^&#x2F;api&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; &#x2F;&#x2F; 设置代理</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的代理设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    open: true,</span><br><span class="line">    host: &#39;localhost&#39;,</span><br><span class="line">    port: 8084,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#39;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        secure: false,</span><br><span class="line">        pathRewrite:&#123;</span><br><span class="line">          &quot;^&#x2F;api&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; &#x2F;&#x2F; 设置代理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h1><h3 id="1-screen"><a href="#1-screen" class="headerlink" title="1. screen"></a>1. screen</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen -S yourname  #新建一个叫yourname的session</span><br><span class="line">screen -ls          #列出当前所有的session</span><br><span class="line">screen -r [yourname&#x2F;scrren-id]  #回到yourname这个session</span><br><span class="line">ctrl+a -&gt; d  #detach当前screen回到原本窗口</span><br><span class="line">ctrel+a -&gt; n #显示下一个窗口（next）</span><br><span class="line">screen -X -s [screenname] #关闭会话</span><br></pre></td></tr></table></figure>

<h3 id="2-Gunicorn"><a href="#2-Gunicorn" class="headerlink" title="2. Gunicorn"></a>2. Gunicorn</h3><p><a href="https://www.cnblogs.com/luyuze95/p/11696534.html" target="_blank" rel="noopener">https://www.cnblogs.com/luyuze95/p/11696534.html</a></p>
<p>Web框架致力于如何生成HTML代码，而Web服务器用于处理和响应HTTP请求。Web框架和Web服务器之间的通信，需要一套双方都遵守的接口协议。WSGI协议就是用来统一这两者的接口的。</p>
<p><strong>1.</strong> 安装gunicorn</p>
<p>要在虚拟状态激活的情况下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install gunicorn   #阿里云自带python2，pip3可以确保调用python3</span><br></pre></td></tr></table></figure>

<p><strong>2.</strong> 启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gunicorn -w 4 -b 127.0.0.1:5000 [app_name]:app</span><br></pre></td></tr></table></figure>

<p><strong>3.</strong> 查找gunicorn进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep gunicorn</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/freinds/p/8074651.html" target="_blank" rel="noopener">https://www.cnblogs.com/freinds/p/8074651.html</a></p>
<p>ps-ef用于查看全格式的全部进程，其中“ps”是在抄Linux中是查看进程的命令，“-e”参数代表显示所有进程，“-f”参数代表全格式。</p>
<p>ps命令将某个进程显示出来</p>
<p>grep命令是查找</p>
<p>中间的|是管道命令 是指ps命令与grep同时执行</p>
<p>PS是LINUX下最常用的也是非常强大的进程查看命令</p>
<p>grep命令是查找，是一种强大的文本搜索工具，它能<a href="https://www.baidu.com/s?wd=%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1d9uWD3PhP9n1b4m1nduAcz0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPjfvrHnzPWT3" target="_blank" rel="noopener">使用正则表达式</a>搜索文本，并把匹配的行打印出来。</p>
<p>grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p>
<p>以下这条命令是检查java 进程是否存在：ps -ef |grep java</p>
<p>*<em>3. *</em>杀死进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 [id]</span><br></pre></td></tr></table></figure>

<h3 id="3-nginx"><a href="#3-nginx" class="headerlink" title="3.nginx"></a>3.nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload   #重新加载nginx配置</span><br><span class="line">sudo service nginx restart  #启动nginx</span><br></pre></td></tr></table></figure>

<p>nginx的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#networkproject</span><br><span class="line"> server &#123;</span><br><span class="line">    listen       8084 default_server;</span><br><span class="line">    listen       [::]:8084 default_server;</span><br><span class="line">    server_name  47.96.227.33;</span><br><span class="line">    root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">            ## stitp的目录</span><br><span class="line">            # the direction of the stitp project</span><br><span class="line">            root &#x2F;myfiles&#x2F;blibiliBarrage&#x2F;dist;</span><br><span class="line">            index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    # 路径代理</span><br><span class="line">    location &#x2F;api&#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line"></span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>biliBara</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>vue</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>biliBara_el-scrollbar</title>
    <url>/2020/05/25/biliBara-el-scrollbar/</url>
    <content><![CDATA[<p>element-ui中的el-scrollbar的使用总结</p>
<a id="more"></a>

<p>借鉴：<br><a href="https://segmentfault.com/a/1190000015068613" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015068613</a><br><a href="https://segmentfault.com/a/1190000019325694?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019325694?utm_source=tag-newest</a></p>
<p>#1.工作原理：<br>总的来说el-scrollbar就是一个wrapper，包裹住要使用scroll的区域。而包裹el-scrollbar的元素要设置成overflow: hidden</p>
<img src="/2020/05/25/biliBara-el-scrollbar/17071720-c586a0d4ecb2a289.png" class="" title="图片.png">
<p>#2.使用<br>设置el-scrollbar的父元素（比如#app，html和body）以及el-scrollbar本身</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#app</span>, <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-component__scroll</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要应用横轴的话还要加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.el-scrollbar &gt;&gt;&gt; .el-scrollbar__wrap</span><br><span class="line">  overflow-x: hidden</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>biliBara</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
